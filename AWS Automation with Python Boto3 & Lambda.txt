                                  -- introduction to Boto3



-- Boto3 is the name of the Python SDK/Library/Module/API for AWS.  

-- Boto3 allows us to directly create, update, and delete AWS services from our Python scripts.  without logging into console 

-- Boto3 is built on the top of the botocore module.  




We have to Install boto3 to work with AWS Services using Python Scripts.  

-- How to install boto3?

if Python-2.x:  pip install boto3  
if python-3.x:  pip3 install boto3



-- Install Python and Boto3 on Linux Machine.

--  create one ec2 linux instance 

-- paste these cmnds one by one 

sudo su - 
yum install gcc openssl-devel bzip2-devel libffi-devel
cd /usr/src
wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
tar xzf Python-3.7.4.tgz
cd Python-3.7.4
./configure --enable-optimizations
make altinstall
cd /usr/local/bin/
./python3.7 --version
./pip3.7 --version
pwd
ln -s /usr/local/bin/python3.7 /bin/python3
python3 --version
ln -s /usr/local/bin/pip3.7 /bin/pip3
pip3 --version
pip3 install boto3



============================= Boto3 environment Setup 


-- create IAM user and attach policies (adminaccess)


-- Configure credentials of your AWS account on using aws cli commands.

-- What is AWS CLI?

The AWS Command Line Interface (AWS CLI) is a unified tool to manage your AWS services. With just one tool to download and configure, you can control multiple AWS services from the command line and automate them through scripts.




-- open cmd and do aws configure 


------------------First Automation Script to list all the IAM Users in your Account.


-- First let us do it manually and see in the AWS Management Console.


-- Script 

-- open vs code 


# Import all the modules and Libraries
import boto3
from pprint import pprint
# Open Management Console
aws_management_console = boto3.session.Session(profile_name="default")
# Open IAM Console
iam_console = aws_management_console.client(service_name="iam")
# Use Boto3 Documentation to get more information (https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)
result = iam_console.list_users()
for each_user in result['Users']:
    print(each_user['UserName'])







=============================================== Concepts of Boto3

Session  
Resource  
Client  
Meta  
Collections  
Waiters  
Paginators


-- Session:

aws_management_console = boto3.session.Session(profile_name="default")

In simple words, it is just the AWS Management Console.

Store configuration information (Credentials of Default user etc‚Ä¶).

Allows us to create Service, Clients and Resources.

It creates a default session for us when we need it.

We can create multiple sessions in the same script!



-- Resource and Client:


We can create particular AWS Service console examples: IAM Console, EC2 Console etc‚Ä¶


You can create an AWS Service console from your Session object.


Region name can be specified after the Profile name.


-- Example for Resource Object:


iam_console = aws_management_console.client(service_name="iam")




--- Example for Client Object:

iam_console = aws_management_console.client(service_name="iam")




---------- Should I choose Resource or Client? 


You can choose anyone depending on your use case.


Resource is Higher Level Object oriented service access. 

Resource objects are only available for a few AWS Services.

Let us check which AWS Service has a Resource Object!!!  - DEMüòâ

['cloudformation', 'cloudwatch', 'dynamodb', 'ec2', 'glacier', 'iam', 'opsworks', 's3', 'sns', 'sqs'] - Resource Object Available.

Client is Low Level Service Access.

In simple terms, the output/response in case of Client will be in Dictionary, which needs more effort in implementing boto3 scripts.

Whereas Resource is an object, we can use simple (.) operation.

All operations that we see in AWS Management Console can be done in Client whereas Resource does not guarantee you that. Some operations may not be supported.

If we do not have some operations in Resource we can enter into Client by using the ‚ÄúMeta‚Äù concept. Let us talk about this later! üòâ






============================== Boto3 Script with Boto3 Documentation 


1 Example 1: List all the IAM users in AWS Account using client objects.


# Import all the modules and Libraries
import boto3
from pprint import pprint
# Open Management Console
aws_management_console = boto3.session.Session(profile_name="default")
# Open IAM Console
iam_console = aws_management_console.client(service_name="iam")
# Use Boto3 Documentation to get more information (https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)
result = iam_console.list_users()
for each_user in result['Users']:
    print(each_user['UserName'])



2  Example 2: List all the running EC2 Instances in your AWS Account using client objects.


# Import all the modules and Libraries
import boto3
# Open Management Console
aws_management_console = boto3.session.Session(profile_name="default")
# Open EC2 Console
ec2_console = aws_management_console.client(service_name="ec2")
# Use Boto3 Documentation to get more information (https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)
result = ec2_console.describe_instances()['Reservations']
for each_instance in result:
    for value in each_instance['Instances']:
        print(value['InstanceId'])



3   Example 4: List all the running EC2 Instances in your AWS Account using resource objects.


import boto3

aws_management_console = boto3.session.Session(profile_name="default")
iam_console_resource = aws_management_console.resource('iam') # Resource Object
iam_console_client = aws_management_console.client('iam') # Client Object

# IAM users list with resource object:
for each_user in iam_console_resource.users.all():
    print(each_user.name)

# IAM users list with client object:
for each in iam_console_client.list_users()['Users']:
   print(each['UserName'])

# dir(aws_management_console)
# print(aws_management_console.get_available_resources())




















